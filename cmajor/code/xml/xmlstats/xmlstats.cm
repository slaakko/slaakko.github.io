using System;
using System.Xml;

class XmlStats : XmlContentHandler
{
    public XmlStats(const string& xmlFileName_) : xmlFileName(xmlFileName_)
    {
    }
    public override Result<bool> StartElement(const System.Lex.Span& span, int fileIndex,
        const ustring& namespaceUri, const ustring& localName, const ustring& qualifiedName, const Attributes& attributes)
    {
        ++numElements;
        numAttributes = numAttributes + attributes.Count();
        return Result<bool>(true);
    }
    public override Result<bool> HandlePI(const System.Lex.Span& span, int fileIndex, const ustring& target, const ustring& data)
    {
        ++numProcessingInstructions;
        return Result<bool>(true);
    }
    public override Result<bool> HandleComment(const System.Lex.Span& span, int fileIndex, const ustring& comment)
    {
        ++numComments;
        return Result<bool>(true);
    }
    public override Result<bool> HandleCDataSection(const System.Lex.Span& span, int fileIndex, const ustring& cdata)
    {
        numCharacters = numCharacters + cdata.Length();
        return Result<bool>(true);
    }
    public override Result<bool> HandleText(const System.Lex.Span& span, int fileIndex, const ustring& text)
    {
        numCharacters = numCharacters + text.Length();
        return Result<bool>(true);
    }
    public void Print()
    {
        Console.Out() << xmlFileName << " contains:" << endl();
        Console.Out() << numElements << " elements" << endl();
        Console.Out() << numAttributes << " attributes" << endl();
        Console.Out() << numProcessingInstructions << " processing instructions" << endl();
        Console.Out() << numComments << " comments" << endl();
        Console.Out() << numCharacters << " characters" << endl();
    }
    private string xmlFileName;
    private long numElements;
    private long numAttributes;
    private long numProcessingInstructions;
    private long numComments;
    private long numCharacters;
}

int main(int argc, const char** argv)
{
    System.Lex.FileMap fileMap;
    for (int i = 1; i < argc; ++i)
    {
        string xmlFileName = argv[i];
        XmlStats stats(xmlFileName);
        auto result = ParseXmlFile(xmlFileName, &stats, fileMap);
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return 1;
        }
        stats.Print();
    }
    return 0;
}
