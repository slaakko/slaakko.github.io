using System;
using System.Threading.Fibers;

public class Context
{
    public Context() : mainFiber(null), otherFiber(null), runningFiber(null), otherFiberRunning(false)
    {
    }
    public void SetFibers(Fiber* mainFiber_, Fiber* otherFiber_)
    {
        mainFiber = mainFiber_;
        otherFiber = otherFiber_;
        runningFiber = mainFiber;
    }
    public void SetOtherFiberRunning(bool running)
    {
        otherFiberRunning = running;
    }
    public bool IsOtherFiberRunning() const
    {
        return otherFiberRunning;
    }
    [nodiscard]
    public Result<bool> Switch()
    {
        if (runningFiber == mainFiber)
        {
            runningFiber = otherFiber;
            auto result = SwitchToFiber(*otherFiber);
            if (result.Error()) return result;
        }
        else
        {
            runningFiber = mainFiber;
            auto result = SwitchToFiber(*mainFiber);
            if (result.Error()) return result;
        }
        return Result<bool>(true);
    }
    private Fiber* mainFiber;
    private Fiber* otherFiber;
    private Fiber* runningFiber;
    private bool otherFiberRunning;
}

public void FiberHelper(Context* context)
{
    Console.Out() << "in fiber helper" << endl();
    int count = 1;
    while (count <= 3)
    {
        Console.Out() << "switching context from fiber helper, count = " << count << endl();
        auto result = context->Switch();
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return;
        }
        Console.Out() << "back in fiber helper, count = " << count << endl();
        ++count;
    }
    Console.Out() << "exiting fiber helper" << endl();
}

public void FiberFunc(void* data)
{
    Console.Out() << "in fiber" << endl();
    Context* context = cast<Context*>(data);
    context->SetOtherFiberRunning(true);
    auto result = context->Switch();
    if (result.Error())
    {
        Console.Error() << result.GetErrorMessage() << endl();
        return;
    }
    FiberHelper(context);
    context->SetOtherFiberRunning(false);
    Console.Out() << "fiber exiting" << endl();
    result = context->Switch();
}

public int main()
{
    Context context;
    Fiber mainFiber = Fiber.FromCurrentThread();
    FiberFunction fiberFunction = FiberFunc;
    Fiber otherFiber(fiberFunction, &context);
    context.SetFibers(&mainFiber, &otherFiber);
    auto result = context.Switch();
    if (result.Error())
    {
        Console.Error() << result.GetErrorMessage() << endl();
        return 1;
    }
    Console.Out() << "back in main fiber" << endl();
    while (context.IsOtherFiberRunning())
    {
        Console.Out() << "switch context from main fiber" << endl();
        result = context.Switch();
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return 1;
        }
        Console.Out() << "back in main fiber" << endl();
    }
    Console.Out() << "exiting main" << endl();
    return 0;
}
