using System;
using System.IO;
using System.Collections;
using System.RegularExpressions;

void PrintHelp()
{
    Console.Out() << "Usage: sgrep \"PATTERN\" FILES..." << endl();
}

int main(int argc, const char** argv)
{
    ustring pattern;
    List<string> fileNames;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("--"))
        {
            if (arg == "--help")
            {
                PrintHelp();
                return 1;
            }
            else
            {
                int errorId = AllocateError("unknown option '" + arg + "'");
                Console.Error() << GetErrorMessage(errorId) << endl();
                return 1;
            }
        }
        else if (arg.StartsWith("-"))
        {
            for (char o : arg)
            {
                if (o == 'h')
                {
                    PrintHelp();
                    return 1;
                }
                else
                {
                    int errorId = AllocateError("unknown option '-" + string(o) + "'");
                    Console.Error() << GetErrorMessage(errorId) << endl();
                    return 1;
                }
            }
        }
        else
        {
            if (pattern.IsEmpty())
            {
                auto utfResult = ToUtf32(arg);
                if (utfResult.Error())
                {
                    Console.Error() << utfResult.GetErrorMessage() << endl();
                    return 1;
                }
                ustring s = Rvalue(utfResult.Value());
                pattern = u".*" + s + u".*";
            }
            else
            {
                fileNames.Add(arg);
            }
        }
    }
    Context context;
    auto nfaResult = CompileRegularExpressionPattern(context, pattern);
    if (nfaResult.Error())
    {
        Console.Error() << nfaResult.GetErrorMessage() << endl();
        return 1;
    }
    Nfa nfa = nfaResult.Value();
    for (const string& fileName : fileNames)
    {
        Console.Out() << fileName << ":" << endl();
        auto readResult = File.ReadAllLines(fileName);
        if (readResult.Error())
        {
            Console.Error() << readResult.GetErrorMessage() << endl();
            return 1;
        }
        List<string> lines = Rvalue(readResult.Value());
        long n = lines.Count();
        for (long i = 0; i < n; ++i)
        {
            auto utfResult = ToUtf32(lines[i]);
            if (utfResult.Error())
            {
                Console.Error() << utfResult.GetErrorMessage() << endl();
                return 1;
            }
            ustring line = Rvalue(utfResult.Value());
            if (PatternMatch(line, nfa))
            {
                Console.Out() << ToString(i + 1) << ": " << line << endl();
            }
        }
    }
    return 0;
}
