using System;
using System.IO;
using System.IO.Compression;

void PrintHelp()
{
    Console.Out() <<
        "Usage: deflate [options] <input-file> <output-file>" << endl() <<
        "options:" << endl() << 
        "--help (-h)" << endl() <<
        "   Print this help." << endl() <<
        "--verbose (-v)" << endl() <<
        "   Be verbose." << endl() <<
        "--compress (-c)" << endl() <<
        "   Compress <input-file> to <output-file>." << endl() <<
        "   (default)" << endl() <<
        "--extract (-x)" << endl() <<
        "   Extract <input-file> to <output-file>." << endl()
    ;
}

public enum Mode
{
    compress, extract
}

int main(int argc, const char** argv)
{
    string inputFile;
    string outputFile;
    int argCount = 0;
    Mode mode = Mode.compress;
    bool verbose = false;
    for (int i = 1; i < argc; ++i)
    {
        string arg = argv[i];
        if (arg.StartsWith("-"))
        {
            if (arg == "--help" || arg == "-h")
            {
                PrintHelp();
                return 0;
            }
            else if (arg == "--verbose" || arg == "-v")
            {
                verbose = true;
            }
            else if (arg == "--compress" || arg == "-c")
            {
                mode = Mode.compress;
            }
            else if (arg == "--extract" || arg == "-x")
            {
                mode = Mode.extract;
            }
            else
            {
                int errorId = AllocateError("unknown argument '" + arg + "'");
                Console.Error() << GetErrorMessage(errorId) << endl();
                return 1;
            }
        }
        else
        {
            switch (argCount)
            {
                case 0:
                {
                    inputFile = arg;
                    ++argCount;
                    break;
                }                    
                case 1:
                {
                    outputFile = arg;
                    ++argCount;
                    break;
                }
                default:
                {
                    ++argCount;
                    break;
                }
            }
        }
    }
    if (argCount < 2)
    {
        int errorId = AllocateError("missing arguments (try --help)");
        Console.Error() << GetErrorMessage(errorId) << endl();
        return 1;
    }
    else if (argCount > 2)
    {
        int errorId = AllocateError("extra arguments (try --help)");
        Console.Error() << GetErrorMessage(errorId) << endl();
        return 1;
    }
    if (verbose)
    {
        if (mode == Mode.compress)
        {
            Console.Out() << "compressing '" << inputFile << "' to '" << outputFile << "'..." << endl();
        }
        else if (mode == Mode.extract)
        {
            Console.Out() << "extracting '" << inputFile << "' to '" << outputFile << "'..." << endl();
        }
    }
    if (mode == Mode.compress)
    {
        FileStream in(inputFile, cast<OpenMode>(OpenMode.read | OpenMode.binary));
        FileStream out(outputFile, cast<OpenMode>(OpenMode.write | OpenMode.binary));
        DeflateStream compressStream(&out, CompressionMode.compress);
        auto result = in.CopyTo(compressStream);
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return 1;
        }
    }
    else if (mode == Mode.extract)
    {
        FileStream in(inputFile, cast<OpenMode>(OpenMode.read | OpenMode.binary));
        DeflateStream extractStream(&in, CompressionMode.decompress);
        FileStream out(outputFile, cast<OpenMode>(OpenMode.write | OpenMode.binary));
        auto result = extractStream.CopyTo(out);
        if (result.Error())
        {
            Console.Error() << result.GetErrorMessage() << endl();
            return 1;
        }
    }
    if (verbose)
    {
        if (mode == Mode.compress)
        {
            Console.Out() << "compressed." << endl();
        }
        else if (mode == Mode.extract)
        {
            Console.Out() << "extracted." << endl();
        }
    }
    return 0;
}
